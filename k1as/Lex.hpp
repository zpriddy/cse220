//**************************************************************************************************************
// CLASS: cLex
//
// DESCRIPTION
// Implements the lexical analyzer which returns successive tokens read from the source code file.
//
// AUTHOR INFORMATION
// Kevin R. Burger [KRB]
//
// Mailing Address:
// Computer Science & Engineering
// School of Computing, Informatics, and Decision Systems Engineering
// Arizona State University
// Tempe, AZ 85287-8809
//
// Email: burgerk@asu
// Web:	  http://kevin.floorsoup.com
//**************************************************************************************************************
#ifndef LEX_HPP
#define LEX_HPP

#include <fstream>
using std::ifstream;

#include <string>
using std::string;

//==============================================================================================================
// CLASS: cLex
//==============================================================================================================
class cLex {

public:
	//==========================================================================================================
	// PUBLIC FUNCTION MEMBERS
	//==========================================================================================================

	//---------------------------------------------------------------------------------------------------------
	// Default ctor.
	//---------------------------------------------------------------------------------------------------------
	cLex(string const& pSrcFname);

	//---------------------------------------------------------------------------------------------------------
	// Dtor.
	//---------------------------------------------------------------------------------------------------------
	~cLex();

	//---------------------------------------------------------------------------------------------------------
	// DiscardLine
	//---------------------------------------------------------------------------------------------------------
	void DiscardLine();

	//---------------------------------------------------------------------------------------------------------
	// Reset()
	//---------------------------------------------------------------------------------------------------------
	void Reset();

	//---------------------------------------------------------------------------------------------------------
	// Token()
	//---------------------------------------------------------------------------------------------------------
	string Token();

private:
	//==========================================================================================================
	// PRIVATE FUNCTION MEMBERS
	//==========================================================================================================

	//---------------------------------------------------------------------------------------------------------
	// Private copy ctor.
	//---------------------------------------------------------------------------------------------------------
	cLex(cLex const&);

	//---------------------------------------------------------------------------------------------------------
	// Private operator=().
	//---------------------------------------------------------------------------------------------------------
	cLex& operator=(cLex const&);

	//==========================================================================================================
	// PRIVATE DATA MEMBERS
	//==========================================================================================================
	ifstream mSrcIn;
	string	 mToken;
};

#endif
