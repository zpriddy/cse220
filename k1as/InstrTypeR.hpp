//**************************************************************************************************************
// CLASS: cInstrTypeR (derived from cInstr)
//
// DESCRIPTION
// Declares a class that represents a type R instruction, i.e., one that has just one operand: a register. This
// class is derived from cInstr.
//
// AUTHOR INFORMATION
// Kevin R. Burger [KRB]
//
// Mailing Address:
// Computer Science & Engineering
// School of Computing, Informatics, and Decision Systems Engineering
// Arizona State University
// Tempe, AZ 85287-8809
//
// Email: burgerk@asu
// Web:	  http://kevin.floorsoup.com
//**************************************************************************************************************
#ifndef INSTRTYPER_HPP
#define INSTRTYPER_HPP

#include <string>
using std::string;

#include "Instr.hpp"
#include "Register.hpp"

//==============================================================================================================
// CLASS: cInstrTypeR
//==============================================================================================================
class cInstrTypeR : public cInstr {

public:
	//==========================================================================================================
	// PUBLIC FUNCTION MEMBERS
	//==========================================================================================================

	//---------------------------------------------------------------------------------------------------------
	// Default ctor.
	//---------------------------------------------------------------------------------------------------------
	cInstrTypeR();

	//---------------------------------------------------------------------------------------------------------
	// Another ctor.
	//---------------------------------------------------------------------------------------------------------
	cInstrTypeR(string const& pMnemonic, cRegister const& pReg);

	//---------------------------------------------------------------------------------------------------------
	// Copy ctor.
	//---------------------------------------------------------------------------------------------------------
	cInstrTypeR(cInstrTypeR const& pInstr);

	//---------------------------------------------------------------------------------------------------------
	// Dtor.
	//---------------------------------------------------------------------------------------------------------
	virtual ~cInstrTypeR()
	{
	}

	//---------------------------------------------------------------------------------------------------------
	// Encode()
	//---------------------------------------------------------------------------------------------------------
	virtual void Encode();

	//---------------------------------------------------------------------------------------------------------
	// Register()
	//
	// DESCRIPTION
	// Accessor function for mRegister.
	//---------------------------------------------------------------------------------------------------------
	cRegister Register() const
	{
		return mRegister;
	}

	//---------------------------------------------------------------------------------------------------------
	// operator=()
	//---------------------------------------------------------------------------------------------------------
	cInstrTypeR& operator=(cInstrTypeR const& pInstr);

protected:
	//==========================================================================================================
	// PROTECTED FUNCTION MEMBERS
	//==========================================================================================================

	//---------------------------------------------------------------------------------------------------------
	// Copy()
	//---------------------------------------------------------------------------------------------------------
	void Copy(cInstrTypeR const& pInstr);

	//---------------------------------------------------------------------------------------------------------
	// Register(cRegister const&)
	//
	// DESCRIPTION
	// Mutator function for mRegister.
	//---------------------------------------------------------------------------------------------------------
	void Register(cRegister const& pRegister)
	{
		mRegister = pRegister;
	}

private:
	//==========================================================================================================
	// PRIVATE DATA MEMBERS
	//==========================================================================================================

	// A type R instruction has a register associated with the mnemonic.
	cRegister mRegister;
};

#endif
